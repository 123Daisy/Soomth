import numpy as np
import math
from scipy import integrate
from sympy import *
import matplotlib.pyplot as plt

class Soomth():
    def __init__(self,vs,ve,vmax,amax,jerk,distance):
        self.vs=vs
        self.ve=ve
        self.vmax=vmax
        self.amax=amax
        self.jerk=jerk
        self.distance=distance
        self.a=self.b=self.c=self.d=self.t1=self.t2=0
          
    def calL1(self): # vs<ve
        smin = (self.amax/(16*self.jerk))*(3*self.ve+5*self.vs)
        return smin
    
    def step1(self):
        s_min=self.calL1()
        if(self.distance>s_min):
            self.checkDetVel()
        else:
            self.modify_Acc()
            self.modify_Jerk()
        return True
        
    def step2(self):
        s_min=self.calL2()
        if(s_min < self.distance):
            self.checkDetVel2()
        else:
            self.amax=3*(self.vs**2-self.ve**2)
            self.jerk=8*self.amax**2/(3*np.abs(self.vs-self.ve))
        return True
    
    def step3(self):
        self.a=(-self.jerk**2)/3*self.amax
        self.b=self.jerk/2
        self.c=0
        self.t1=self.amax/self.jerk
        self.t2=self.amax/(2*self.jerk)
        return True
    
    def step4(self):
        self.a=(self.jerk**2)/12*self.amax
        self.b=-self.jerk/2
        self.c=0
        self.d=self.vs
        self.t1=(2*self.amax)/self.jerk
        self.t2=4*self.amax/self.jerk
        return True
    
    def step5(self):
        x=np.linspace(0,self.t2,1000)    #画出v(t)曲线
        vt=[self.a*np.power(i,3)+2*self.b*np.power(i,2)+ self.c*i+self.d for i in x]
        at=[3*self.a*np.power(i,2)+2*self.b*np.power(i,1)+ self.c for i in x]
        jt=[6*self.a*i +2*self.b for i in x]
        print(vt[0:10])
        print(at[0:10])
        print(jt[0:10])
        plt.figure(figsize=(8,8),dpi=80)
        plt.figure(1)
        A1=plt.subplot(221)
        A1.plot(x,vt,color='r',linestyle='-')
        A2=plt.subplot(222)
        A2.plot(x,at,color='r',linestyle='-')
        A3=plt.subplot(223)
        A3.plot(x,jt,color='r',linestyle='-')

    def getDetVel2(self):
        return 8*self.amax/(3*self.jerk)
    
    def checkDetVel2(self):
        detVel=self.getDetVel2()
        if( np.abs(self.vs-self.ve)< detVel):
            self.amax=np.sqrt(3*self.jerk*np.abs(detVel)/8)
        elif(np.abs(self.vs-self.ve)>detVel):
            self.jerk=8*self.amax/3*detVel          
        return 
        
    def calL2(self):
        return 3*(self.vs**2-self.ve**2)/(4*self.amax)
    
    def modify_Acc(self):
        self.amax=( 3*(3*self.ve+5*self.vs)*(self.ve-self.vs) )/(4*self.distance)
        
    def modify_Jerk(self):
        self.jerk = self.amax**2/(12*(self.vs-self.ve))
        
    def getdetVel(self): #ve-vs
        return self.amax**2/(12*self.jerk)
    
    def checkDetVel(self):
        detVel=self.getdetVel()
        if(np.abs(self.ve-self.vs)> detVel):
            self.jerk=self.amax**2/(12*detVel)
        elif(np.abs(self.ve-self.vs)<detVel):
            self.amax=np.sqrt((self.ve-self.vs)*12*self.jerk)
        return 
    
    def calParameter1(self):  #a=(-J/np.sqrt(6V/J)) b=1/2J; T1=(1/2t2) t2=sqrt(6V/J)
#         a= -self.jerk/(np.sqrt(6*self.vmax/self.jerk))
#         b= 0.5*self.jerk
#         t2=np.sqrt(6*self.vmax/self.jerk)
#         t1=0.5*t2
        a=(-self.jerk**2)/3*self.amax
        b=self.jerk/2
        c=0
        d=self.vs
        t1=self.amax/self.jerk
        t2=self.amax/(2*self.jerk)
        return a,b,c,d,t1,t2    #vs<ve
    
    def calParameter2(self): #c=J*J/(12A) d=-1/2J ;t3=2*A/J  T4= 4A/J
#         c = self.jerk**2/(12*self.amax)
#         d = -0.5*self.jerk
#         t3=2*self.amax/self.jerk
#         t4=2*t3
        a=(self.jerk**2)/12*self.amax
        b=-self.jerk/2;
        c=0
        d=self.vs
        t1=(2*self.amax)/self.jerk
        t2=4*self.amax/self.jerk
        return a,b,c,d,t1,t2
    
    def caltime(self):
        time=[]
        if(self.vs<=self.ve):
            if(self.vs==self.ve and self.ve==self.vmax):
                time[0]=time[1]=time[2]=self,discrete/self.vmax
                return time
            else:
                self.a,self.b,self.c,self.d,self.t1,self.t2=self.calParameter1() #计算v(t),a(t)的系数
                if(self.step1()):
                    if(self.step3()):
                        self.step5()
                    
        else:   #减速运动
            self.a,self.b,self.c,self.d,self.t1,self.t2=self.calParameter2() #计算v(t),a(t)的系数
            if(self.step2()):
                if(self.step4()):
                    self.step5()

if __name__=='__main__':
    model=Soomth(50,500,300,2000,4000,1000)  #vs,ve,vmax,amax,jerk,distance
    time=model.caltime()
    
#     print(time)
